openapi: 3.0.0
info:
  title: Sellar Integrations API
  description: "This is a documentation for Sellar integrations. You will need a supplier activated API key `SLR.xyz` to test the authorization"
  contact:
    email: james@sellar.io
  version: "1.0"
servers:
  - url: https://api.sellar.io
    description: Production server (uses live data)
  - url: https://api-staging.sellar.io
    description: Staging server (uses test data)
tags:
  - name: integrations
    description: Secured token based requests (SLR.xyz)
paths:
  /orders:
    get:
      tags:
        - integrations
      operationId: orders_Get
      parameters:
        - name: limit
          in: query
          explode: false
          schema:
            type: number
            default: 25
        - name: offset
          in: query
          explode: false
          schema:
            type: number
        - name: order
          in: query
          explode: false
          schema:
            type: string
          description: Include column and sort order "ASC" or "DESC" in the format as ?order[]=["updatedAt","DESC"]
      responses:
        "200":
          description: "Returns a list of orders"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderListType"
        "400":
          description: "Order does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
  /orders/{id}:
    get:
      tags:
        - integrations
      operationId: order_Get
      parameters:
        - name: id
          in: path
          required: true
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: "Returns single order"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderGetType"
        "400":
          description: "Order does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
    put:
      tags:
        - integrations
      operationId: order_Update
      parameters:
        - name: id
          in: path
          required: true
          explode: false
          schema:
            type: number
      requestBody:
        description: View **request body schema** for details on accepted request format.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderUpdate'

        required: true
      responses:
        "200":
          description: "Update to order succeeded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCreateOrUpdateType"
        "201":
          description: "Update to order succeeded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderCreateOrUpdateType"
        "400":
          description: "Update to order failed"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
  /products/{id}:
    get:
      tags:
        - integrations
      operationId: product_Get
      parameters:
        - name: id
          in: path
          required: true
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: "Returns single product"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductGetType"
        "400":
          description: "Product does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
    put:
      tags:
        - integrations
      operationId: productcreate_Update
      parameters:
        - name: id
          in: path
          required: true
          explode: false
          schema:
            type: number
      requestBody:
        description: View **request body schema** for details on accepted request format.
        content:
          application/json:
            schema:
              type: object
              properties:
                stock:
                  type: number
                  description: "Cannot be defined with `availableStock`. This is the absolute stock level of the product on Sellar - if there is `committedStock` on Sellar it will be deducted from this value."
                availableStock:
                  type: number
                  description: "Cannot be defined with `stock`. This is the available stock on Sellar. It will be added to the `committedStock` level on Sellar to determine the correct `stock` value, which will be updated appropriately. This should only be used if orders are getting imported before they have been `confirmed`."

        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductCreateOrUpdateType"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
  /products:
    get:
      tags:
        - integrations
      operationId: product_List
      parameters:
        - name: limit
          in: query
          required: true
          explode: false
          schema:
            type: number
            default: 25
        - name: offset
          in: query
          required: true
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: List of products (default limit is 25)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductListType"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
  /supplier-retailer-connections:
    get:
      tags:
        - integrations
      operationId: supplierretailerconnection_List
      summary: ""
      parameters:
        - name: limit
          in: query
          required: true
          explode: false
          schema:
            type: number
            default: 25
        - name: offset
          in: query
          required: true
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SupplierRetailerConnectionListType"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
  /webhooks:
    get:
      tags:
        - integrations
      operationId: webhook_List
      summary: ""
      parameters:
        - name: limit
          in: query
          required: true
          explode: false
          schema:
            type: number
            default: 25
        - name: offset
          in: query
          required: true
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebhookListType"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
    post:
      tags:
        - integrations
      operationId: webhook_Create
      parameters: []
      requestBody:
        description: "Create a webhook for supported types include: order.created, order.updated"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookCreateOrUpdateType"
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []
  /webhooks/{id}:
    delete:
      tags:
        - integrations
      operationId: webhook_Delete
      parameters:
        - name: id
          in: path
          required: true
          explode: false
          schema:
            type: number
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Webhook"
        "400":
          description: ""
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HttpException"
      security:
        - bearer: []

components:
  schemas:
    Address:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        street:
          type: string
        city:
          type: string
        postalCode:
          type: string
        country:
          type: string
    OrderUpdate:
      type: object
      properties:
      # technically confirmedAt is supported, however this is not something that should be in the public domain. If updating order confirmedAt, cannot be provided concurrently with `dispatchedAt` or `deliveredAt`.
        dispatchedAt:
          type: string
          format: date-time
        deliveredAt:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time
          description: The `paidAt` property must be provided as only parameter, cannot be provided concurrently with any other properties.
        customInvoiceNumber:
          type: string
          description: Once the order has been confirmed, this value can only be updated if the `customInvoiceNumber` has not already been defined on the order.
    HttpException:
      type: object
      properties: {}
    Business:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        logoUrl:
          type: string
    Supplier:
      required:
        - id
        - Business
        - currency
      type: object
      properties:
        id:
          type: number
        invoicesEnabled:
          type: boolean
        Business:
          $ref: "#/components/schemas/Business"
    Retailer:
      type: object
      properties:
        id:
          type: number
        hasNoDraughtDutyRelief:
          type: boolean
        type:
          type: string
          enum: [bar,restaurant,distributor,pub,onlineStore,tapRoom,hotel,office,offLicense,other]
        BusinessId:
          type: number
        Business:
          $ref: "#/components/schemas/Business"
      required:
        - BusinessId
        - Business
        - googlePlaceId
        - SupplierId
        - type
    SupplierRetailerConnectionListType:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SupplierRetailerConnection"
      required:
        - data
    SupplierRetailerConnection:
      type: object
      properties:
        id:
          type: number
        SupplierId:
          type: number
        Supplier:
          $ref: "#/components/schemas/Supplier"
        RetailerId:
          type: number
        Retailer:
          $ref: "#/components/schemas/Retailer"
        PriceTierId:
          type: number
        initiator:
          type: string
          enum: [supplier,retailer]
        approved:
          type: boolean
          description: Whether the connection has been accepted, this should be true for active customers
        customerCode:
          type: string
        notes:
          type: string
        paymentDue:
          type: number
          description: Days until payment due after an order is placed
        fulfillmentType:
          type: string
          enum: [direct,collection,courier,haulier,ups]
        existingCustomer:
          type: boolean
        mailingListPermission:
          type: boolean
      required:
        - id
        - SupplierId
        - Supplier
        - RetailerId
        - Retailer
        - PriceTierId
        - PriceTier
        - initiator
        - approved
        - stripeCustomerId
        - customerCode
        - notes
        - Comments
        - paymentDue
        - fulfillmentType
        - existingCustomer
        - mailingListPermission
    PriceTierOrderRule:
      type: object
      properties: {}
    PriceTierDiscount:
      type: object
      properties: {}
    ProductPriceTier:
      type: object
      properties: {}
    PriceTier:
      required:
        - Discounts
        - PriceTierOrderRules
        - ProductPriceTiers
        - Supplier
        - SupplierId
        - minimumOrderPrice
        - name
      type: object
      properties:
        id:
          type: number
        SupplierId:
          type: number
        Supplier:
          $ref: "#/components/schemas/Supplier"
        name:
          type: string
        PriceTierOrderRules:
          type: array
          items:
            $ref: "#/components/schemas/PriceTierOrderRule"
        Discounts:
          type: array
          items:
            $ref: "#/components/schemas/PriceTierDiscount"
        ProductPriceTiers:
          type: array
          items:
            $ref: "#/components/schemas/ProductPriceTier"
        minimumOrderPrice:
          type: number
    Order:
      required:
        - id
        - createdAt
        - voidedAt
        - invoiceIssuedAt
        - hasNoDraughtDutyRelief
        - type
        - price
        - DeliveryAddress
        - DeliveryAddressId
        - InvoiceAddress
        - InvoiceAddressId
        - OrderItems
        - Retailer
        - RetailerId
        - Supplier
        - SupplierId
        - cancelledAt
        - confirmedAt
        - currency
        - customInvoiceNumber
        - deliveredAt
        - deliveryCharge
        - deliveryNotes
        - deliveryNumber
        - deliveryPlannedAt
        - deniedAt
        - discountAmount
        - dispatchPlannedAt
        - dispatchedAt
        - fulfillmentType
        - initiator
        - paidAt
        - paymentDue
        - paymentStatus
        - paymentType
        - stripePaymentIntentId
        - vatPercentage

      type: object
      properties:
        id:
          type: number
        createdAt:
          type: string
          format: date-time
        invoiceIssuedAt:
          type: string
          format: date-time
        voidedAt:
          type: string
          format: date-time
        SupplierId:
          type: number
        Supplier:
          $ref: "#/components/schemas/Supplier"
        RetailerId:
          type: number
        Retailer:
          $ref: "#/components/schemas/Retailer"
        OrderItems:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
        DeliveryAddressId:
          type: number
        DeliveryAddress:
          $ref: "#/components/schemas/Address"
        InvoiceAddressId:
          type: number
        InvoiceAddress:
          $ref: "#/components/schemas/Address"
        deliveryPlannedAt:
          type: string
          format: date-time
        dispatchPlannedAt:
          type: string
          format: date-time
        dispatchedAt:
          type: string
          format: date-time
        deliveredAt:
          type: string
          format: date-time
        deliveryNotes:
          type: string
        deliveryNumber:
          type: string
        fulfillmentType:
          type: string
          enum: [direct,collection,courier,haulier,ups]
        paymentType:
          type: string
          enum: [manual,stripe,checkout]
        paymentStatus:
          type: string
          enum: [draft,open,paid,refunded,void]
        paymentDue:
          type: string
          format: date-time
        paidAt:
          type: string
          format: date-time
        vatPercentage:
          type: number
        cancelledAt:
          type: string
          format: date-time
        deniedAt:
          type: string
          format: date-time
        confirmedAt:
          type: string
          format: date-time
        deliveryCharge:
          type: number
        discountAmount:
          type: number
        price:
          type: number
        customInvoiceNumber:
          type: string
        stripePaymentIntentId:
          type: string
        currency:
          type: string
        hasNoDraughtDutyRelief:
          type: boolean
        type:
          type: string
          enum: [single,recurring]
    OrderListType:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Order"
    OrderCreateOrUpdateType:
      required:
        - data
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Order"
    OrderGetType:
      required:
        - data
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Order"
    OrderItem:
      type: object
      properties:
        ProductId:
          type: number
        quantity:
          type: number
        discountable:
          type: boolean
        price:
          type: number
        fullPrice:
          type: number
        Product:
          $ref: "#/components/schemas/Product"
      required:
        - ProductId
        - quantity
        - discountable
        - price
        - fullPrice
        - Product
    Product:
      required:
        - SupplierId
        - active
        - heroImageUrl
        - imageUrl
        - index
        - stock
      type: object
      properties:
        id:
          type: number
        SupplierId:
          type: number
        ParentId:
          type: number
        stock:
          type: number
        active:
          type: boolean
        imageUrl:
          type: string
        heroImageUrl:
          type: string
        index:
          type: number
        sku:
          type: string
        glutenFree:
          type: boolean
        vegan:
          type: boolean
        lactoseFree:
          type: boolean
        canBackorder:
          type: boolean
        committedStock:
          type: number
        availableStock:
          type: number
        packQuantity:
          type: number
        volume:
          type: number
        displayUnit:
          type: string
        containerType:
          type: string
    ProductCreateOrUpdateType:
      required:
        - data
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Product"
    ProductListType:
      required:
        - data
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    ProductGetType:
      required:
        - data
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Product"
    Webhook:
      type: object
      properties:
        id:
          type: number
        createdAt:
          type: string
          format: date-time
        deletedAt:
          type: string
          format: date-time
        type:
          type: string
          enum: [order.created, order.updated]
        url:
          type: string
    WebhookListType:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Webhook"
      required:
        - data
    WebhookCreateOrUpdateType:
      required:
        - data
      type: object
      properties:
        type:
          type: string
        url:
          type: string
  securitySchemes:
    bearer:
      type: http
      scheme: bearer
      bearerFormat: API Key (SLR.xyz)
